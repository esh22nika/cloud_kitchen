version: '3.8'

services:
  dashboard:
    image: nginx:alpine
    container_name: chef_dashboard
    ports:
      - "80:80"
    volumes:
      - ./dashboard.html:/usr/share/nginx/html/index.html:ro
      - ./animated_storyboard.html:/usr/share/nginx/html/storyboard.html:ro
      - ./nginx-simple.conf:/etc/nginx/nginx.conf:ro

  mock_api:
    image: node:18-alpine
    container_name: chef_mock_api
    ports:
      - "8080:8080"
    working_dir: /app
    command: >
      sh -c "
      npm init -y &&
      npm install express cors &&
      node -e \"
const express = require('express');
const cors = require('cors');
const app = express();

app.use(cors());
app.use(express.json());

const kitchens = {
  kitchen_1: { name: 'Downtown Kitchen', load: 30, capacity: 10, status: 'available', orders: [] },
  kitchen_2: { name: 'Uptown Bistro', load: 50, capacity: 12, status: 'available', orders: [] },
  kitchen_3: { name: 'Suburb Deli', load: 20, capacity: 8, status: 'available', orders: [] },
  kitchen_4: { name: 'Express Kitchen', load: 70, capacity: 15, status: 'available', orders: [] }
};

let orderCounter = 1;

app.get('/health', (req, res) => {
  res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

app.get('/api/status', (req, res) => {
  // Add some randomness to loads
  Object.values(kitchens).forEach(kitchen => {
    kitchen.load = Math.max(10, Math.min(90, kitchen.load + Math.random() * 10 - 5));
  });
  
  res.json({
    kitchens,
    system_health: 'Healthy',
    total_orders: Math.floor(Math.random() * 500) + 100,
    uptime: '99.9%'
  });
});

app.post('/api/orders', (req, res) => {
  const orderId = 'order_' + String(orderCounter++).padStart(4, '0');
  const selectedKitchen = Object.values(kitchens).reduce((prev, curr) => 
    prev.load < curr.load ? prev : curr
  );
  selectedKitchen.load = Math.min(100, selectedKitchen.load + 10);
  selectedKitchen.orders.push({
    id: orderId,
    items: ['Random Item'],
    status: 'cooking'
  });
  
  res.json({ order_id: orderId, status: 'created' });
});

app.post('/api/migrate', (req, res) => {
  const migrations = Math.floor(Math.random() * 3) + 1;
  res.json({ migrations, status: 'completed' });
});

app.post('/api/simulate_rush', (req, res) => {
  const orders = [];
  for (let i = 0; i < 10; i++) {
    orders.push('order_' + String(orderCounter++).padStart(4, '0'));
  }
  res.json({ rush_orders: orders, count: orders.length });
});

app.listen(8080, '0.0.0.0', () => {
  console.log('Mock API server running on port 8080');
});
      \"
      "