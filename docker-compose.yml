version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: chef_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chef_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: chef_postgres
    environment:
      POSTGRES_DB: distributed_chef
      POSTGRES_USER: chef_admin
      POSTGRES_PASSWORD: chef_password_2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chef_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chef_admin -d distributed_chef"]
      interval: 30s
      timeout: 10s
      retries: 5

  dashboard:
    image: nginx:alpine
    container_name: chef_dashboard
    ports:
      - "80:80"
    volumes:
      - ./dashboard.html:/usr/share/nginx/html/index.html:ro
      - ./animated_storyboard.html:/usr/share/nginx/html/storyboard.html:ro
    networks:
      - chef_network

  load_balancer:
    image: python:3.11-slim
    container_name: chef_load_balancer
    ports:
      - "8080:8080"
    volumes:
      - .:/app
    working_dir: /app
    command: >
      sh -c "
      pip install --no-cache-dir flask flask-cors &&
      python -c \"
import json
import time
import random
from datetime import datetime
from flask import Flask, jsonify, request
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

@app.route('/health')
def health():
    return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})

@app.route('/api/status')
def status():
    kitchens = {
        'kitchen_1': {'name': 'Downtown Kitchen', 'load': random.randint(20, 80), 'capacity': 10, 'status': 'available', 'queue_size': random.randint(0, 5)},
        'kitchen_2': {'name': 'Uptown Bistro', 'load': random.randint(20, 80), 'capacity': 12, 'status': 'available', 'queue_size': random.randint(0, 5)},
        'kitchen_3': {'name': 'Suburb Deli', 'load': random.randint(20, 80), 'capacity': 8, 'status': 'available', 'queue_size': random.randint(0, 5)},
        'kitchen_4': {'name': 'Express Kitchen', 'load': random.randint(20, 80), 'capacity': 15, 'status': 'available', 'queue_size': random.randint(0, 5)}
    }
    return jsonify({
        'kitchens': kitchens,
        'system_health': 'Healthy',
        'total_orders': random.randint(100, 500),
        'uptime': '99.9%'
    })

@app.route('/api/orders', methods=['POST'])
def create_order():
    order_id = f'order_{random.randint(1000, 9999)}'
    return jsonify({'order_id': order_id, 'status': 'created'})

@app.route('/api/migrate', methods=['POST'])
def migrate_orders():
    return jsonify({'migrations': random.randint(1, 3), 'status': 'completed'})

@app.route('/api/simulate_rush', methods=['POST'])
def simulate_rush():
    orders = [f'order_{random.randint(1000, 9999)}' for _ in range(10)]
    return jsonify({'rush_orders': orders, 'count': len(orders)})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=False)
      \"
      "
    networks:
      - chef_network

  prometheus:
    image: prom/prometheus:latest
    container_name: chef_prometheus
    ports:
      - "9090:9090"
    networks:
      - chef_network

  grafana:
    image: grafana/grafana:latest
    container_name: chef_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - chef_network

networks:
  chef_network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  grafana_data: